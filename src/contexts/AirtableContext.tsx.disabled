import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { airtableService } from '../services/airtableService';
import { mapAirtableToTask } from '../utils/airtableHelpers';
import { Task } from '../types/Task';

interface AirtableContextType {
  tasks: Task[];
  loading: boolean;
  error: string | null;
  lastRefresh: Date;
  availableUsers: string[];
  loadContacts: () => Promise<void>;
}

const AirtableContext = createContext<AirtableContextType | null>(null);

export function AirtableProvider({ children }: { children: ReactNode }) {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());
  const [availableUsers, setAvailableUsers] = useState<string[]>([]);

  const loadContacts = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('🔄 AirtableProvider: Loading contacts...');
      
      // Pobierz kontakty i dostępnych użytkowników równolegle
      const [contacts, users] = await Promise.all([
        airtableService.getContacts(),
        airtableService.getAvailableUsers()
      ]);
      
      console.log('✅ AirtableProvider: Successfully loaded contacts');
      
      // Mapuj kontakty na Task objects
      const mappedTasks: Task[] = contacts.map(contact => mapAirtableToTask(contact));
      
      setTasks(mappedTasks);
      setAvailableUsers(users);
      setLastRefresh(new Date());
      
    } catch (err) {
      console.error('❌ AirtableProvider: Error loading contacts:', err);
      setError(err instanceof Error ? err.message : 'Unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  // Load contacts on mount
  useEffect(() => {
    console.log('🔄 AirtableProvider: Initializing...');
    if (loadContacts) {
      loadContacts();
    }
  }, [loadContacts]); // Include loadContacts in dependencies

  const contextValue: AirtableContextType = {
    tasks,
    loading,
    error,
    lastRefresh,
    availableUsers,
    loadContacts
  };

  return (
    <AirtableContext.Provider value={contextValue}>
      {children}
    </AirtableContext.Provider>
  );
}

export function useAirtable(): AirtableContextType {
  const context = useContext(AirtableContext);
  if (!context) {
    throw new Error('useAirtable must be used within an AirtableProvider');
  }
  return context;
}